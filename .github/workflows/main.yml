name: Auto Deployment with Azure Service Principal

env:
  AZURE_CONTAINER_APP_NAME: workflow
  AZURE_GROUP_NAME: workflow-resource-group
  AZURE_REGION: eastus
  IMAGE_NAME: ghcr.io/ocean-shine/workflow:latest

on:
  workflow_dispatch:  # 手动触发工作流

permissions:
  id-token: write  # 明确授予访问 ID Token 的权限

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.10 (using actions/setup-python@v2)
      - name: Set up Python 3.10.15
        uses: actions/setup-python@v2  # 使用 v2 版本以避免错误
        with:
          python-version: 3.10.15  # 指定使用 Python 3.10
          check-latest: false
          update-environment: true
          allow-prereleases: false
        env:
          ACTIONS_STEP_DEBUG: true  # 启用调试日志，帮助调试问题

      # Step 3: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Step 4: Check if Docker image exists
      - name: Check if Docker image exists
        id: check_image
        run: |
          IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://ghcr.io/v2/${{ github.repository_owner }}/workflow/manifests/latest)
          if [ "$IMAGE_EXISTS" -eq "200" ]; then
            echo "Image exists on GHCR."
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Image does not exist on GHCR."
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 5: Build and Push Docker image if it does not exist
      - name: Build and Push Docker image
        if: env.IMAGE_EXISTS == 'false'
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker push ${{ env.IMAGE_NAME }}

      # Step 6: Azure Login (Use Azure service principal credentials)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 7: Authenticate with GitHub Container Registry in Azure
      - name: Authenticate Azure Container App with GHCR
        run: |
          echo "Authenticating with GitHub Container Registry..."
          az containerapp registry set \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_GROUP_NAME }} \
            --server ghcr.io \
            --username ${{ github.actor }} \
            --password ${{ secrets.GHCR_TOKEN }} \
            --debug

      # Step 8: Check if resource group exists and create if needed
      - name: Check if resource group exists and create if needed
        run: |
          echo "Checking if resource group exists..."
          RESOURCE_GROUP=$(az group exists --name ${{ env.AZURE_GROUP_NAME }} --debug)
          if [[ "$RESOURCE_GROUP" == "false" ]]; then
            echo "Creating resource group: ${{ env.AZURE_GROUP_NAME }}"
            az group create --name ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }} --debug
          else
            echo "Resource group ${{ env.AZURE_GROUP_NAME }} already exists"
          fi

      # Step 9: Check if container app environment exists and create if needed
      - name: Check if container app environment exists and create if needed
        run: |
          echo "Checking if container app environment exists..."
          ENVIRONMENT_EXISTS=$(az containerapp env list --resource-group ${{ env.AZURE_GROUP_NAME }} --query "[?name=='agent-environment'].name" -o tsv --debug)
          if [[ -z "$ENVIRONMENT_EXISTS" ]]; then
            echo "Creating container app environment: agent-environment"
            az containerapp env create --name agent-environment --resource-group ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }} --debug
          else
            echo "Container app environment already exists"
          fi

      # Step 10: Check if container app exists, create or update accordingly
      - name: Check if container app exists and create or update
        run: |
          echo "Checking if container app exists..."
          CONTAINER_APP_EXISTS=$(az containerapp list --resource-group ${{ env.AZURE_GROUP_NAME }} --query "[?name=='${{ env.AZURE_CONTAINER_APP_NAME }}'].name" -o tsv --debug)
          
          if [[ -z "$CONTAINER_APP_EXISTS" ]]; then
            echo "Creating container app: ${{ env.AZURE_CONTAINER_APP_NAME }}"
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --environment agent-environment \
              --cpu 2 --memory 4Gi \
              --env-vars AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} OPENAI_API_BASE=https://aiocean.openai.azure.com/ OPENAI_API_VERSION="2024-08-01-preview" \
              --debug
          else
            echo "Updating container app: ${{ env.AZURE_CONTAINER_APP_NAME }}"
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --environment agent-environment \
              --cpu 2 --memory 4Gi \
              --env-vars AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} OPENAI_API_BASE=https://aiocean.openai.azure.com/ OPENAI_API_VERSION="2024-08-01-preview" \
              --debug
          fi

name: CI/CD Pipeline v2

env:
  AZURE_CONTAINER_APP_NAME: workflow
  AZURE_GROUP_NAME: workflow-resource-group
  AZURE_REGION: eastus
  IMAGE_NAME: ghcr.io/ocean-shine/workflow:latest
  OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  OPENAI_API_BASE: https://aiocean.openai.azure.com/
  OPENAI_API_VERSION: "2024-08-01-preview"
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  DOCKER_BUILD_REQUIRED: true
  AZURE_CONTAINER_APP_ENV_NAME: workflow-env

on:
  push:
    branches:
      - main

permissions:
  id-token: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker Image
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'true' }}
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_NAME }} .
          echo "Docker image built successfully."

      - name: Push Docker Image to GHCR
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'true' }}
        run: |
          echo "Pushing Docker image to GHCR..."
          docker push ${{ env.IMAGE_NAME }}
          echo "Docker image pushed successfully."

      - name: Deploy to Azure using ghcr.io/ocean-shine/workflow:latest
        run: |
          # 运行 Azure CLI 操作在 ghcr.io/ocean-shine/workflow:latest 镜像中
          docker run \
            -e AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }} \
            -e AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }} \
            -e AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }} \
            -e AZURE_GROUP_NAME=${{ env.AZURE_GROUP_NAME }} \
            -e AZURE_REGION=${{ env.AZURE_REGION }} \
            -e AZURE_CONTAINER_APP_ENV_NAME=${{ env.AZURE_CONTAINER_APP_ENV_NAME }} \
            -e AZURE_CONTAINER_APP_NAME=${{ env.AZURE_CONTAINER_APP_NAME }} \
            -e IMAGE_NAME=${{ env.IMAGE_NAME }} \
            -e OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
            -e OPENAI_API_BASE=${{ env.OPENAI_API_BASE }} \
            -e OPENAI_API_VERSION=${{ env.OPENAI_API_VERSION }} \
            -e GHCR_TOKEN=${{ secrets.GHCR_TOKEN }} \
            ghcr.io/ocean-shine/workflow:latest bash -c "
              echo 'Logging into Azure...'
              az login --service-principal \
                -u \$AZURE_CLIENT_ID \
                -p \$AZURE_CLIENT_SECRET \
                --tenant \$AZURE_TENANT_ID
              echo 'Azure login successful.'

              # 检查资源组是否存在
              echo 'Checking resource group...'
              RESOURCE_GROUP_EXISTS=\$(az group show --name \$AZURE_GROUP_NAME --query 'name' -o tsv)
              if [ -z \"\$RESOURCE_GROUP_EXISTS\" ]; then
                echo 'Creating resource group...'
                az group create --name \$AZURE_GROUP_NAME --location \$AZURE_REGION
                echo 'Resource group created successfully.'
              else
                echo 'Resource group already exists.'
              fi

              # 检查容器应用环境是否存在
              echo 'Checking container app environment...'
              ENV_EXISTS=\$(az containerapp env show --name \$AZURE_CONTAINER_APP_ENV_NAME --resource-group \$AZURE_GROUP_NAME --query 'name' -o tsv)
              if [ -z \"\$ENV_EXISTS\" ]; then
                echo 'Creating container app environment...'
                az containerapp env create --name \$AZURE_CONTAINER_APP_ENV_NAME --resource-group \$AZURE_GROUP_NAME --location \$AZURE_REGION
                echo 'Container app environment created successfully.'
              else
                echo 'Container app environment already exists.'
              fi

              # 检查容器应用是否存在
              echo 'Checking container app...'
              APP_EXISTS=\$(az containerapp show --name \$AZURE_CONTAINER_APP_NAME --resource-group \$AZURE_GROUP_NAME --query 'name' -o tsv)
              if [ -z \"\$APP_EXISTS\" ]; then
                echo 'Creating container app...'
                az containerapp create \
                  --name \$AZURE_CONTAINER_APP_NAME \
                  --resource-group \$AZURE_GROUP_NAME \
                  --image \$IMAGE_NAME \
                  --cpu 1 \
                  --memory 2Gi \
                  --env-vars OPENAI_API_KEY=\$OPENAI_API_KEY OPENAI_API_BASE=\$OPENAI_API_BASE OPENAI_API_VERSION=\$OPENAI_API_VERSION \
                  --ingress external \
                  --target-port 8080 \
                  --environment \$AZURE_CONTAINER_APP_ENV_NAME
                echo 'Container app created successfully.'
              else
                APP_STATUS=\$(az containerapp show --name \$AZURE_CONTAINER_APP_NAME --resource-group \$AZURE_GROUP_NAME --query 'properties.provisioningState' -o tsv)
                if [ \"\$APP_STATUS\" != \"Succeeded\" ]; then
                  echo 'Container app is in failed state. Deleting and recreating...'
                  az containerapp delete --name \$AZURE_CONTAINER_APP_NAME --resource-group \$AZURE_GROUP_NAME --yes
                  az containerapp create \
                    --name \$AZURE_CONTAINER_APP_NAME \
                    --resource-group \$AZURE_GROUP_NAME \
                    --image \$IMAGE_NAME \
                    --cpu 1 \
                    --memory 2Gi \
                    --env-vars OPENAI_API_KEY=\$OPENAI_API_KEY OPENAI_API_BASE=\$OPENAI_API_BASE OPENAI_API_VERSION=\$OPENAI_API_VERSION \
                    --ingress external \
                    --target-port 8080 \
                    --environment \$AZURE_CONTAINER_APP_ENV_NAME
                  echo 'Container app recreated successfully.'
                else
                  echo 'Container app exists and is healthy. Skipping creation.'
                fi
              fi

              # 设置容器注册表凭证
              echo 'Setting registry credentials...'
              az containerapp registry set \
                --name \$AZURE_CONTAINER_APP_NAME \
                --resource-group \$AZURE_GROUP_NAME \
                --server ghcr.io \
                --username \$AZURE_CLIENT_ID \
                --password \$GHCR_TOKEN
              echo 'Registry credentials set.'

              # 更新容器应用
              echo 'Updating container app...'
              az containerapp update \
                --name \$AZURE_CONTAINER_APP_NAME \
                --resource-group \$AZURE_GROUP_NAME \
                --image \$IMAGE_NAME \
                --cpu 1 \
                --memory 2Gi \
                --set-env-vars OPENAI_API_KEY=\$OPENAI_API_KEY OPENAI_API_BASE=\$OPENAI_API_BASE OPENAI_API_VERSION=\$OPENAI_API_VERSION \
                --revision-suffix v2
              echo 'Container app updated.'
            "
          echo "Azure deployment complete!"

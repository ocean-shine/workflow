name: CI/CD Pipeline v2

env:
  AZURE_CONTAINER_APP_NAME: workflow
  AZURE_GROUP_NAME: workflow-resource-group
  AZURE_REGION: eastus
  IMAGE_NAME: ghcr.io/ocean-shine/workflow:latest
  OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  OPENAI_API_BASE: https://aiocean.openai.azure.com/
  OPENAI_API_VERSION: "2024-08-01-preview"
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  DOCKER_BUILD_REQUIRED: false
  AZURE_CONTAINER_APP_ENV_NAME: workflow-env

on:
  push:
    branches:
      - main

permissions:
  id-token: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker Image
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'true' }}
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_NAME }} .
          echo "Docker image built successfully."

      - name: Push Docker Image to GHCR
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'true' }}
        run: |
          echo "Pushing Docker image to GHCR..."
          docker push ${{ env.IMAGE_NAME }}
          echo "Docker image pushed successfully."

      - name: Deploy to Azure
        run: |
          echo "Deploying to Azure..."
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

          # Step 1: Check Resource Group
          echo "Checking resource group..."
          RESOURCE_GROUP_EXISTS=$(az group show --name $AZURE_GROUP_NAME --query "name" -o tsv)
          if [ -z "$RESOURCE_GROUP_EXISTS" ]; then
            echo "Creating resource group..."
            az group create --name $AZURE_GROUP_NAME --location $AZURE_REGION
          fi

          # Step 2: Check Container App Environment
          echo "Checking container app environment..."
          ENV_EXISTS=$(az containerapp env show --name $AZURE_CONTAINER_APP_ENV_NAME --resource-group $AZURE_GROUP_NAME --query "name" -o tsv)
          if [ -z "$ENV_EXISTS" ]; then
            echo "Creating container app environment..."
            az containerapp env create --name $AZURE_CONTAINER_APP_ENV_NAME --resource-group $AZURE_GROUP_NAME --location $AZURE_REGION
          fi

          # Step 3: Check Container App Status
          echo "Checking container app..."
          APP_EXISTS=$(az containerapp show --name $AZURE_CONTAINER_APP_NAME --resource-group $AZURE_GROUP_NAME --query "name" -o tsv)
          if [ -z "$APP_EXISTS" ]; then
            echo "Creating container app..."
            az containerapp create \
              --name $AZURE_CONTAINER_APP_NAME \
              --resource-group $AZURE_GROUP_NAME \
              --image $IMAGE_NAME \
              --cpu 1 \
              --memory 2Gi \
              --env-vars OPENAI_API_KEY=$OPENAI_API_KEY OPENAI_API_BASE=$OPENAI_API_BASE OPENAI_API_VERSION=$OPENAI_API_VERSION \
              --ingress external \
              --target-port 8080 \
              --environment $AZURE_CONTAINER_APP_ENV_NAME
            echo "Container app created."
          else
            APP_STATUS=$(az containerapp show --name $AZURE_CONTAINER_APP_NAME --resource-group $AZURE_GROUP_NAME --query "properties.provisioningState" -o tsv)
            if [ "$APP_STATUS" != "Succeeded" ]; then
              echo "Container app is in failed state. Deleting and recreating..."
              az containerapp delete --name $AZURE_CONTAINER_APP_NAME --resource-group $AZURE_GROUP_NAME --yes
              az containerapp create \
                --name $AZURE_CONTAINER_APP_NAME \
                --resource-group $AZURE_GROUP_NAME \
                --image $IMAGE_NAME \
                --cpu 1 \
                --memory 2Gi \
                --env-vars OPENAI_API_KEY=$OPENAI_API_KEY OPENAI_API_BASE=$OPENAI_API_BASE OPENAI_API_VERSION=$OPENAI_API_VERSION \
                --ingress external \
                --target-port 8080 \
                --environment $AZURE_CONTAINER_APP_ENV_NAME
              echo "Container app recreated successfully."
            else
              echo "Container app exists and is healthy. Skipping creation."
            fi
          fi

          # Step 4: Set Registry Credentials
          echo "Setting registry credentials..."
          az containerapp registry set \
            --name $AZURE_CONTAINER_APP_NAME \
            --resource-group $AZURE_GROUP_NAME \
            --server ghcr.io \
            --username ${{ github.actor }} \
            --password $GHCR_TOKEN
          echo "Registry credentials set."

          # Step 5: Update Container App
          echo "Updating container app..."
          az containerapp update \
            --name $AZURE_CONTAINER_APP_NAME \
            --resource-group $AZURE_GROUP_NAME \
            --image $IMAGE_NAME \
            --cpu 1 \
            --memory 2Gi \
            --set-env-vars OPENAI_API_KEY=$OPENAI_API_KEY OPENAI_API_BASE=$OPENAI_API_BASE OPENAI_API_VERSION=$OPENAI_API_VERSION \
            --revision-suffix v2
          echo "Container app updated."

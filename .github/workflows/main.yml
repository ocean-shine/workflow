name: Build and Deploy to Azure Container App using GHCR

on:
  push:
    branches:
      - main  # 触发 CI/CD 的分支

env:
  AZURE_CONTAINER_APP_NAME: workflow  # Azure 容器应用的名称
  AZURE_GROUP_NAME: workflow-resource-group  # Azure 资源组名称
  AZURE_REGION: eastus  # Azure 区域
  IMAGE_NAME: ghcr.io/${{ github.actor }}/workflow:latest  # 镜像名称
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}  # GitHub 容器注册表的 Token
  AZURE_CONTAINER_APP_ENV_NAME: workflow-env  # 容器应用环境名称
  DOCKER_BUILD_REQUIRED: false  # 设置为 false 跳过构建 Docker 镜像步骤

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境运行 CI/CD

    permissions:
      packages: write  # 向 GitHub 容器注册表写入的权限
      contents: read  # 读取 GitHub 仓库的权限

    steps:
      # Step 1: Checkout 代码
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: 登录到 GitHub 容器注册表
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # GitHub 用户名
          password: ${{ secrets.GHCR_TOKEN }}  # GitHub 注册表 Token

      # Step 4: 构建并推送 Docker 镜像到 GHCR（仅当 DOCKER_BUILD_REQUIRED 为 true 时才执行）
      - name: Build and Push Docker Image to GHCR
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'true' }}  # 仅当 DOCKER_BUILD_REQUIRED 为 true 时执行
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}  # 镜像标签
          file: ./Dockerfile  # Dockerfile 文件路径

      # Step 5: 登录到 Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Azure 服务主体凭证（从 GitHub Secrets 获取）

      # Step 6: 更新 Azure 容器应用镜像
      - name: Update container app on Azure
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # 安装扩展包
            az config set extension.use_dynamic_install=yes_without_prompt

            # 更新容器应用
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --cpu 1 \
              --memory 2Gi \
              --revision-suffix v2

            # 配置容器应用的 Ingress 设置
            az containerapp ingress enable \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --target-port 8080 \
              --ingress external \
              --protocol HTTP

      # Step 7: 注销 Azure
      - name: Logout from Azure
        run: az logout  # 完成后注销 Azure 登录

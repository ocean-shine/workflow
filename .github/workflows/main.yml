  name: Auto Deployment with Azure Service Principal

env:
  AZURE_CONTAINER_APP_NAME: workflow
  AZURE_GROUP_NAME: workflow-resource-group
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

on:
  workflow_dispatch:  # Manual trigger

jobs:
  create_or_use_sp:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Service Principal exists
        id: check_sp
        run: |
          echo "Checking if Service Principal already exists..."
          
          # Check if the SP already exists by querying its AppId (client id)
          sp_id=$(az ad sp show --id "http://github-actions-sp" --query "appId" -o tsv || echo "")

          if [ -z "$sp_id" ]; then
            echo "Service Principal does not exist. Creating a new one..."

            # Create the Service Principal if it doesn't exist
            sp_info=$(az ad sp create-for-rbac --name "github-actions-sp" --role Contributor --scopes /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }} --query "{appId: appId, password: password, tenant: tenant}" -o json)

            # Extract the values from the output
            AZURE_CLIENT_ID=$(echo $sp_info | jq -r .appId)
            AZURE_CLIENT_SECRET=$(echo $sp_info | jq -r .password)
            AZURE_TENANT_ID=$(echo $sp_info | jq -r .tenant)

            # Store the SP credentials in GitHub Environment for subsequent steps
            echo "SP created: Client ID, Secret, Tenant ID are stored."
          else
            echo "Service Principal already exists. Using existing SP."
            
            # Fetch the existing SP credentials
            AZURE_CLIENT_ID=$sp_id
            AZURE_CLIENT_SECRET=$(az ad sp credential reset --name $sp_id --query "password" -o tsv)
            AZURE_TENANT_ID=$(az ad sp show --id $sp_id --query "tenant" -o tsv)

            # Store existing SP credentials
            echo "Existing SP credentials fetched."
          fi

          # Save the credentials to GitHub Environment variables for the next steps
          echo "CLIENT_ID=$AZURE_CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$AZURE_CLIENT_SECRET" >> $GITHUB_ENV
          echo "TENANT_ID=$AZURE_TENANT_ID" >> $GITHUB_ENV


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Check if resource group exists and create if needed
        run: |
          RESOURCE_GROUP=$(az group exists --name ${{ env.AZURE_GROUP_NAME }})
          if [[ "$RESOURCE_GROUP" == "false" ]]; then
            echo "Creating resource group: ${{ env.AZURE_GROUP_NAME }}"
            az group create --name ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }}
          else
            echo "Resource group ${{ env.AZURE_GROUP_NAME }} already exists"
          fi

      - name: Check if container app environment exists and create if needed
        run: |
          ENVIRONMENT_EXISTS=$(az containerapp env show --name agent-environment --resource-group ${{ env.AZURE_GROUP_NAME }} --query "name" -o tsv)
          if [[ -z "$ENVIRONMENT_EXISTS" ]]; then
            echo "Creating container app environment: agent-environment"
            az containerapp env create --name agent-environment --resource-group ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }}
          else
            echo "Container app environment already exists"
          fi

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt

            # Authenticate with GitHub container registry
            az containerapp registry set -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --server ghcr.io --username ${{ github.actor }} --password ${{ secrets.GHCR_TOKEN }}
            
            # Create or update the container app
            az containerapp up \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ghcr.io/${{ env.REPO }}:${{ github.sha }} \
              --environment agent-environment \
              --cpu 2 --memory 4Gi \
              --set-env-vars OPENAI_API_TYPE=azure OPENAI_API_BASE=https://demo-alfredo-openai.openai.azure.com/ OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} OPENAI_API_VERSION="2023-07-01-preview"
            
            # Optionally, update the resource limits if needed
            az containerapp update -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --cpu 2 --memory 4Gi

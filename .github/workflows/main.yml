name: Build and Deploy to Azure Container App using GHCR

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发 CI/CD

env:
  AZURE_CONTAINER_APP_NAME: workflow  # Azure 容器应用的名称
  AZURE_GROUP_NAME: workflow-resource-group  # Azure 资源组名称
  AZURE_REGION: eastus  # Azure 区域
  IMAGE_NAME: ghcr.io/${{ github.actor }}/workflow:latest  # 镜像名称
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}  # 从 GitHub Secrets 获取 GHCR Token
  AZURE_CONTAINER_APP_ENV_NAME: workflow-env  # Azure 容器应用环境名称

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境运行 CI/CD

    permissions:
      packages: write  # 需要向 GitHub Container Registry 写入权限
      contents: read  # 需要读取 GitHub 仓库的权限

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # 确保在正确的分支上工作

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # GitHub 用户名
          password: ${{ secrets.GHCR_TOKEN }}  # 使用 GitHub Secrets 中存储的 GHCR Token

      # Step 4: Build and Push Docker Image to GHCR
      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}  # 镜像标签，格式：ghcr.io/username/repo:latest
          file: ./Dockerfile  # Dockerfile 文件路径，假设它与工作流文件位于同一目录

      # Step 5: Log in to Azure using Service Principal credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # 用于 Azure 登录的 Service Principal 凭证，从 GitHub Secrets 获取

      # Step 6: Update Azure Container App with the new image
      - name: Update container app on Azure
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # 安装扩展包，确保没有遗漏
            az config set extension.use_dynamic_install=yes_without_prompt

            # 更新 Azure 上的容器应用，使用 GHCR 中的镜像
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --cpu 1 \
              --memory 2Gi \
              --target-port 8080 \  # 目标端口，确保它与你的容器应用暴露的端口一致
              --ingress external \
              --environment ${{ env.AZURE_CONTAINER_APP_ENV_NAME }}

      # Step 7: Logout from Azure
      - name: Logout from Azure
        run: az logout  # 完成后注销 Azure 登录

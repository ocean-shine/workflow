name: Auto Deployment with Azure Service Principal

env:
  AZURE_CONTAINER_APP_NAME: workflow
  AZURE_GROUP_NAME: workflow-resource-group
  AZURE_REGION: eastus
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/workflow:latest  # 镜像的路径

on:
  workflow_dispatch:  # 手动触发工作流

permissions:
  id-token: write  # 明确授予访问 ID Token 的权限

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}  # 使用 GHCR Token 登录

      # 3. Check if Docker image exists
      - name: Check if Docker image exists
        id: check_image
        run: |
          IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://ghcr.io/v2/${{ github.repository_owner }}/workflow/manifests/latest)
          if [ "$IMAGE_EXISTS" -eq "200" ]; then
            echo "Image exists on GHCR."
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Image does not exist on GHCR."
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      # 4. Build and Push Docker image if it does not exist
      - name: Build and Push Docker image
        if: env.IMAGE_EXISTS == 'false'
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker push ${{ env.IMAGE_NAME }}

      # 5. Azure Login (Use Azure service principal credentials)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 6. Check if resource group exists and create if needed
      - name: Check if resource group exists and create if needed
        run: |
          RESOURCE_GROUP=$(az group exists --name ${{ env.AZURE_GROUP_NAME }})
          if [[ "$RESOURCE_GROUP" == "false" ]]; then
            echo "Creating resource group: ${{ env.AZURE_GROUP_NAME }}"
            az group create --name ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }}
          else
            echo "Resource group ${{ env.AZURE_GROUP_NAME }} already exists"
          fi

      # 7. Check if container app environment exists and create if needed
      - name: Check if container app environment exists and create if needed
        run: |
          ENVIRONMENT_EXISTS=$(az containerapp env list --resource-group ${{ env.AZURE_GROUP_NAME }} --query "[?name=='agent-environment'].name" -o tsv)
          if [[ -z "$ENVIRONMENT_EXISTS" ]]; then
            echo "Creating container app environment: agent-environment"
            az containerapp env create --name agent-environment --resource-group ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }}
          else
            echo "Container app environment already exists"
          fi

      # 8. Check if container app exists and create if needed
      - name: Check if container app exists and create if needed
        run: |
          CONTAINER_APP_EXISTS=$(az containerapp list --resource-group ${{ env.AZURE_GROUP_NAME }} --query "[?name=='${{ env.AZURE_CONTAINER_APP_NAME }}'].name" -o tsv)
          if [[ -z "$CONTAINER_APP_EXISTS" ]]; then
            echo "Creating container app: ${{ env.AZURE_CONTAINER_APP_NAME }}"
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --environment agent-environment \
              --cpu 2 --memory 4Gi \
              --env-vars OPENAI_API_TYPE=azure OPENAI_API_BASE=https://aiocean.openai.azure.com/ OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} OPENAI_API_VERSION="2024-08-01-preview"
          else
            echo "Container app already exists"
          fi

      # 9. Deploy the container app (if it exists or was just created)
      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt

            # Authenticate with GitHub container registry
            az containerapp registry set -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --server ghcr.io --username ${{ github.actor }} --password ${{ secrets.GHCR_TOKEN }}
            
            # Create or update the container app
            az containerapp up \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_GROUP_NAME }} \
              --image ${{ env.IMAGE_NAME }} \
              --environment agent-environment \
              --cpu 2 --memory 4Gi \
              --env-vars OPENAI_API_TYPE=azure OPENAI_API_BASE=https://aiocean.openai.azure.com/ OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} OPENAI_API_VERSION="2024-08-01-preview"
            
            # Optionally, update the resource limits if needed
            az containerapp update -n ${{ env.AZURE_CONTAINER_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --cpu 2 --memory 4Gi

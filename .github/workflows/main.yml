name: CI/CD Pipeline v3

on:
  push:
    branches:
      - main

permissions:
  id-token: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CONTAINER_APP_NAME: workflow
      AZURE_GROUP_NAME: workflow-resource-group
      AZURE_REGION: eastus
      IMAGE_NAME: ghcr.io/ocean-shine/workflow:latest
      OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      OPENAI_API_BASE: https://aiocean.openai.azure.com/
      OPENAI_API_VERSION: "2024-08-01-preview"
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      DOCKER_BUILD_REQUIRED: false
      AZURE_CONTAINER_APP_ENV_NAME: workflow-env
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push Docker Image to GHCR
        if: ${{ env.DOCKER_BUILD_REQUIRED == 'false' }}
        run: |
          echo "Pushing Docker image to GHCR..."
          docker push ${{ env.IMAGE_NAME }}
          echo "Docker image pushed successfully."

      - name: Deploy to Azure Container App
        run: |
          echo "Deploying Docker image to Azure Container App..."

          # Login to Azure CLI using Service Principal
          echo "Logging into Azure..."
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          echo "Azure login successful."

          # Check if Resource Group exists
          RESOURCE_GROUP_EXISTS=$(az group show --name ${{ env.AZURE_GROUP_NAME }} --query 'name' -o tsv 2>/dev/null || echo "NOT_FOUND")

          if [ "$RESOURCE_GROUP_EXISTS" != "NOT_FOUND" ]; then
            echo "Resource Group exists. Deleting resource group: ${{ env.AZURE_GROUP_NAME }}"
            az group delete --name ${{ env.AZURE_GROUP_NAME }} --yes --no-wait
            echo "Resource group deletion started."

            # Wait for the resource group to be deleted (check every minute)
            echo "Waiting for the resource group to be deleted..."
            while az group show --name ${{ env.AZURE_GROUP_NAME }} --query 'name' -o tsv 2>/dev/null; do
              echo "Resource group still exists. Waiting for 1 minute..."
              sleep 60
            done
            echo "Resource group deleted successfully."
          else
            echo "Resource Group does not exist, skipping deletion."
          fi

          # Check if Container App exists
          APP_EXISTS=$(az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_GROUP_NAME }} --query 'name' -o tsv 2>/dev/null || echo "NOT_FOUND")

          if [ "$APP_EXISTS" != "NOT_FOUND" ]; then
            echo "Container App exists. Deleting app: ${{ env.AZURE_CONTAINER_APP_NAME }}"
            az containerapp delete --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_GROUP_NAME }} --yes --no-wait
            echo "Container App deletion started."

            # Wait for the container app to be deleted (check every minute)
            echo "Waiting for the container app to be deleted..."
            while az containerapp show --name ${{ env.AZURE_CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_GROUP_NAME }} --query 'name' -o tsv 2>/dev/null; do
              echo "Container App still exists. Waiting for 1 minute..."
              sleep 60
            done
            echo "Container App deleted successfully."
          else
            echo "Container App does not exist, skipping deletion."
          fi

          # Now create the resource group (if it was deleted)
          echo "Creating resource group: ${{ env.AZURE_GROUP_NAME }}"
          az group create --name ${{ env.AZURE_GROUP_NAME }} --location ${{ env.AZURE_REGION }}
          echo "Resource group created successfully."

          # Deploy the container app
          echo "Deploying Docker image to Azure Container App..."

          # Deploy the container app to Azure
          az containerapp create \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_GROUP_NAME }} \
            --cpu 1 --memory 2Gi \
            --env-vars OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} OPENAI_API_BASE=${{ env.OPENAI_API_BASE }} OPENAI_API_VERSION=${{ env.OPENAI_API_VERSION }} \
            --ingress external --target-port 80 --environment ${{ env.AZURE_CONTAINER_APP_ENV_NAME }} \
            --image ${{ env.IMAGE_NAME }}

          echo "Azure Container App deployment complete!"
